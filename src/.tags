!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/ishida/myfiles/products/git-todos/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/1f2c0e0/
Action	interfaces/cli/body.rs	/^enum Action {$/;"	g
Add	interfaces/cli/body.rs	/^    Add,$/;"	e	enum:Action
Cli	interfaces/cli/body.rs	/^impl Cli {$/;"	c
Cli	interfaces/cli/body.rs	/^pub(crate) struct Cli {$/;"	s
English	interfaces/preferences/language.rs	/^    English,$/;"	e	enum:Language
Finish	interfaces/cli/body.rs	/^    Finish,$/;"	e	enum:Action
Import	interfaces/cli/body.rs	/^    Import,$/;"	e	enum:Action
Japanese	interfaces/preferences/language.rs	/^    Japanese,$/;"	e	enum:Language
Language	interfaces/preferences/language.rs	/^impl Default for Language {$/;"	c
Language	interfaces/preferences/language.rs	/^pub(crate) enum Language {$/;"	g
List	interfaces/cli/body.rs	/^    List,$/;"	e	enum:Action
Mark	interfaces/cli/body.rs	/^    Mark,$/;"	e	enum:Action
Preferences	interfaces/preferences/body.rs	/^pub(crate) struct Preferences {$/;"	s
Remove	interfaces/cli/body.rs	/^    Remove,$/;"	e	enum:Action
Show	interfaces/cli/body.rs	/^    Show,$/;"	e	enum:Action
TodoEntry	todo/entry.rs	/^impl TodoEntry {$/;"	c
TodoEntry	todo/entry.rs	/^pub(crate) struct TodoEntry {$/;"	s
TodoList	todo/list.rs	/^impl TodoList {$/;"	c
TodoList	todo/list.rs	/^pub(crate) struct TodoList {$/;"	s
action	interfaces/cli/body.rs	/^    action: Action,$/;"	m	struct:Cli
add	interfaces/cli/functions.rs	/^pub(crate) fn add(preferences: Preferences, todos_file_path: PathBuf) -> Result<()> {$/;"	f
body	interfaces/cli.rs	/^mod body;$/;"	n
body	interfaces/preferences.rs	/^mod body;$/;"	n
cli	interfaces.rs	/^pub(crate) mod cli;$/;"	n
default	interfaces/preferences/language.rs	/^    fn default() -> Self {$/;"	P	implementation:Language
description	todo/entry.rs	/^    description: String,$/;"	m	struct:TodoEntry
description_in_add_command	interfaces/messages.rs	/^pub(super) fn description_in_add_command(preferences: &Preferences) -> &'static str {$/;"	f
entry	todo.rs	/^pub(crate) mod entry;$/;"	n
finish	interfaces/cli/functions.rs	/^pub(crate) fn finish(preferences: Preferences, todos_file_path: PathBuf) -> Result<()> {$/;"	f
functions	interfaces/cli.rs	/^mod functions;$/;"	n
interfaces	main.rs	/^mod interfaces;$/;"	n
language	interfaces/preferences.rs	/^mod language;$/;"	n
language	interfaces/preferences/body.rs	/^    language: Language,$/;"	m	struct:Preferences
list	interfaces/cli/functions.rs	/^pub(crate) fn list(preferences: Preferences, todos_file_path: PathBuf) -> Result<()> {$/;"	f
list	todo.rs	/^pub(crate) mod list;$/;"	n
main	main.rs	/^fn main() -> Result<()> {$/;"	f
messages	interfaces.rs	/^mod messages;$/;"	n
new	todo/entry.rs	/^    pub(crate) fn new($/;"	P	implementation:TodoEntry
new	todo/list.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:TodoList
no_todo_list	interfaces/messages.rs	/^pub(super) fn no_todo_list(preferences: &Preferences) -> &'static str {$/;"	f
one_line_reader	interfaces/cli/functions.rs	/^fn one_line_reader(necessary: bool, prompt_message: &str) -> Result<String> {$/;"	f
preferences	interfaces.rs	/^mod preferences;$/;"	n
prompt	interfaces/messages.rs	/^macro_rules! prompt {$/;"	M
push	todo/list.rs	/^    pub(crate) fn push(&mut self, todo_entry: TodoEntry) {$/;"	P	implementation:TodoList
read_file	todo/list.rs	/^    pub(crate) fn read_file(file_path: &Path) -> Result<Self> {$/;"	P	implementation:TodoList
remove	interfaces/cli/functions.rs	/^pub(crate) fn remove(preferences: Preferences, todos_file_path: PathBuf) -> Result<()> {$/;"	f
run	interfaces/cli/body.rs	/^    pub(crate) fn run() -> Result<()> {$/;"	P	implementation:Cli
search_todos_file_path	interfaces/cli/body.rs	/^    fn search_todos_file_path() -> Result<PathBuf> {$/;"	P	implementation:Cli
select	interfaces/cli/functions.rs	/^fn select(todos: &[TodoEntry]) -> Result<usize> {$/;"	f
show	interfaces/cli/functions.rs	/^pub(crate) fn show(preferences: Preferences, todos_file_path: PathBuf) -> Result<()> {$/;"	f
str	interfaces/messages.rs	/^pub(super) const SELECT_POINTER: &'static str = "*";$/;"	v
title	todo/entry.rs	/^    title: String,$/;"	m	struct:TodoEntry
title_entry	interfaces/messages.rs	/^pub(super) fn title_entry(head: &str, idx: usize, title: &str) -> String {$/;"	f
title_in_add_command	interfaces/messages.rs	/^pub(super) fn title_in_add_command(preferences: &Preferences) -> &'static str {$/;"	f
todo	main.rs	/^mod todo;$/;"	n
todo_list_is_empty	interfaces/messages.rs	/^pub(super) fn todo_list_is_empty(preferences: &Preferences) -> &'static str {$/;"	f
todos	todo/list.rs	/^    todos: Option<Vec<TodoEntry>>,$/;"	m	struct:TodoList
updated_utc_datetime_rfc3339	todo/entry.rs	/^    updated_utc_datetime_rfc3339: String,$/;"	m	struct:TodoEntry
whitespace_with_width	interfaces/messages.rs	/^pub(super) fn whitespace_with_width(width: usize) -> String {$/;"	f
write_file	todo/list.rs	/^    pub(crate) fn write_file(&self, file_path: &Path) -> Result<()> {$/;"	P	implementation:TodoList
